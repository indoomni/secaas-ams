// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n5Fhkbw8v9iAr45cMpgyB5
// Component: LntSjwsq1IGJ
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: n5Fhkbw8v9iAr45cMpgyB5/projectcss
import sty from "./PlasmicPageLayout.module.css"; // plasmic-import: LntSjwsq1IGJ/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: MqitE1FHOO7R/icon
import LogoOmniSvgIcon from "./icons/PlasmicIcon__LogoOmniSvg"; // plasmic-import: NBvN1p4GWOaS/icon
import { isLoggedIn as __fn_user__isLoggedIn } from "utils/user"; // plasmic-import: user.isLoggedIn/customFunction

createPlasmicElementProxy;

export const PlasmicPageLayout__VariantProps = new Array();

export const PlasmicPageLayout__ArgProps = new Array(
  "children",
  "onBaseUrlChange"
);

const $$ = {
  user: {
    isLoggedIn: __fn_user__isLoggedIn
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageLayout__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "baseUrl",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "https://acaas-api-dev.indoomni.app",
        onChangeProp: "onBaseUrlChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      actionsChildren={
        <div className={classNames(projectcss.all, sty.freeBox__qRIa)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cmnA)}
          >
            <AntdAvatar
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames("__wab_instance", sty.avatar)}
              letters={"IS"}
              size={"small"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4AUg5
              )}
            >
              {"Iman Sjamhudi"}
            </div>
          </Stack__>
          <div
            data-plasmic-name={"hiddenBaseUrl"}
            data-plasmic-override={overrides.hiddenBaseUrl}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.hiddenBaseUrl
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.baseUrl;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      fixSiderbar={true}
      fixedHeader={true}
      layout={"side"}
      logoElement={
        <LogoOmniSvgIcon
          className={classNames(projectcss.all, sty.svg__z7I5M)}
          role={"img"}
        />
      }
      menu={(() => {
        const __composite = {
          hideMenuWhenCollapsed: null,
          defaultOpenAll: null
        };
        __composite["hideMenuWhenCollapsed"] = true;
        __composite["defaultOpenAll"] = true;
        return __composite;
      })()}
      navMenuItems={(() => {
        const __composite = [
          { path: "/", name: "Home" },
          { path: null, name: null, condition: null },
          { path: null, name: null, condition: null }
        ];

        __composite["1"]["path"] = `/user/login`;
        __composite["1"]["name"] = "Login";
        __composite["1"]["condition"] = !$$.user.isLoggedIn();
        __composite["2"]["path"] = `/user/profile`;
        __composite["2"]["name"] = "My profile";
        __composite["2"]["condition"] = $$.user.isLoggedIn();
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { scheme: null };
        __composite["scheme"] = "dark";
        return __composite;
      })()}
      title={"@indoomni.app"}
    >
      <LoadingBoundary
        data-plasmic-name={"loadingBoundary"}
        data-plasmic-override={overrides.loadingBoundary}
        className={classNames("__wab_instance", sty.loadingBoundary)}
        loadingState={
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__uu2X)}>
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__xy3Mg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mGngs
                  )}
                >
                  {"Loading.."}
                </div>
              </div>
            )}
          </DataCtxReader__>
        }
      >
        <DataCtxReader__>
          {$ctx => (
            <div className={classNames(projectcss.all, sty.freeBox__xj9Ov)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <section
                    className={classNames(projectcss.all, sty.section__wyYiQ)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__z3Al9
                      )}
                    >
                      {"Untitled page"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__obZv
                      )}
                    >
                      {
                        "Press the big blue + button to insert components like Tables, Text, Buttons, and Forms.\n\nJoin our Slack Community (icon in bottom left) for help!"
                      }
                    </div>
                  </section>
                ),

                value: args.children
              })}
            </div>
          )}
        </DataCtxReader__>
      </LoadingBoundary>
    </RichLayout>
  );
}

const PlasmicDescendants = {
  root: ["root", "loadingBoundary", "avatar", "hiddenBaseUrl"],
  loadingBoundary: ["loadingBoundary"],
  avatar: ["avatar"],
  hiddenBaseUrl: ["hiddenBaseUrl"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageLayout__ArgProps,
          internalVariantPropNames: PlasmicPageLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageLayout";
  } else {
    func.displayName = `PlasmicPageLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicPageLayout = Object.assign(
  // Top-level PlasmicPageLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    avatar: makeNodeComponent("avatar"),
    hiddenBaseUrl: makeNodeComponent("hiddenBaseUrl"),
    // Metadata about props expected for PlasmicPageLayout
    internalVariantProps: PlasmicPageLayout__VariantProps,
    internalArgProps: PlasmicPageLayout__ArgProps
  }
);

export default PlasmicPageLayout;
/* prettier-ignore-end */
