// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n5Fhkbw8v9iAr45cMpgyB5
// Component: yKO_ucj1k1Pv
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import PageLayout from "../../PageLayout"; // plasmic-import: LntSjwsq1IGJ/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: n5Fhkbw8v9iAr45cMpgyB5/projectcss
import sty from "./PlasmicUserProfilePage.module.css"; // plasmic-import: yKO_ucj1k1Pv/css

createPlasmicElementProxy;

export const PlasmicUserProfilePage__VariantProps = new Array();

export const PlasmicUserProfilePage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserProfilePage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "pageLayout.baseUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "updateProfileForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "updateProfileForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "updateProfileForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "updateProfileForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "updatePasswordForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "updatePasswordForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "updatePasswordForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "updatePasswordForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "confirmPasswordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "usernameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "msisdnInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicUserProfilePage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicUserProfilePage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicUserProfilePage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"userProfile"}
          data-plasmic-override={overrides.userProfile}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.userProfile
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
            onBaseUrlChange={generateStateOnChangeProp($state, [
              "pageLayout",
              "baseUrl"
            ])}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___4Jrwm
                    )}
                  >
                    {"Profile"}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wnKpa
                    )}
                  >
                    {"Enter your credentials below."}
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.updateProfileForm
                      ),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["updateProfileForm", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelAlign: "left",
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["updateProfileForm", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["updateProfileForm"] = ref;
                      },
                      requiredMark: "optional",
                      submitSlot: null,
                      validateTrigger: ["onSubmit"],
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "updateProfileForm.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "updateProfileForm.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"updateProfileForm"}
                        data-plasmic-override={overrides.updateProfileForm}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          data-plasmic-name={"email"}
                          data-plasmic-override={overrides.email}
                          className={classNames("__wab_instance", sty.email)}
                          label={"Email address"}
                          name={"email"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Enter a valid email address"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.emailInput
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["emailInput", "value"],
                                  AntdInput_Helpers
                                ),
                              type: "email",
                              value: generateStateValueProp($state, [
                                "emailInput",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "emailInput.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"emailInput"}
                                data-plasmic-override={overrides.emailInput}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uzPc1
                          )}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"username"}
                            data-plasmic-override={overrides.username}
                            className={classNames(
                              "__wab_instance",
                              sty.username
                            )}
                            label={"Username"}
                            name={"username"}
                            rules={[]}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.usernameInput
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["usernameInput", "value"],
                                    AntdInput_Helpers
                                  ),
                                value: generateStateValueProp($state, [
                                  "usernameInput",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "usernameInput.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"usernameInput"}
                                  data-plasmic-override={
                                    overrides.usernameInput
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"msisdn"}
                            data-plasmic-override={overrides.msisdn}
                            className={classNames("__wab_instance", sty.msisdn)}
                            label={"Phone number"}
                            name={"msisdn"}
                            rules={[]}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.msisdnInput
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["msisdnInput", "value"],
                                    AntdInput_Helpers
                                  ),
                                type: "tel",
                                value: generateStateValueProp($state, [
                                  "msisdnInput",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "msisdnInput.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"msisdnInput"}
                                  data-plasmic-override={overrides.msisdnInput}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3TavT
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button___9MXtv
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sd7Po
                              )}
                            >
                              {"Update profile"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"logoutButton"}
                            data-plasmic-override={overrides.logoutButton}
                            className={classNames(
                              "__wab_instance",
                              sty.logoutButton
                            )}
                            danger={true}
                            ghost={true}
                            onClick={async () => {
                              const $steps = {};
                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return $$.user.loggedOut();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                              $steps["goToHomePage"] = true
                                ? (() => {
                                    const actionArgs = { destination: `/` };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToHomePage"] != null &&
                                typeof $steps["goToHomePage"] === "object" &&
                                typeof $steps["goToHomePage"].then ===
                                  "function"
                              ) {
                                $steps["goToHomePage"] = await $steps[
                                  "goToHomePage"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eFyY
                              )}
                            >
                              {"Logout"}
                            </div>
                          </AntdButton>
                        </Stack__>
                      </FormWrapper>
                    );
                  })()}
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__jtnx
                    )}
                  >
                    {"Change password"}
                  </h1>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.updatePasswordForm
                      ),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["updatePasswordForm", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelAlign: "left",
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["updatePasswordForm", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["updatePasswordForm"] = ref;
                      },
                      requiredMark: "optional",
                      submitSlot: null,
                      validateTrigger: ["onSubmit"],
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "updatePasswordForm.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "updatePasswordForm.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"updatePasswordForm"}
                        data-plasmic-override={overrides.updatePasswordForm}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          data-plasmic-name={"password"}
                          data-plasmic-override={overrides.password}
                          className={classNames("__wab_instance", sty.password)}
                          label={"Password"}
                          name={"password"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Password cannot be empty"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.passwordInput
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["passwordInput", "value"],
                                  AntdInput_Helpers
                                ),
                              type: "password",
                              value: generateStateValueProp($state, [
                                "passwordInput",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "passwordInput.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"passwordInput"}
                                data-plasmic-override={overrides.passwordInput}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          data-plasmic-name={"confirmPassword"}
                          data-plasmic-override={overrides.confirmPassword}
                          className={classNames(
                            "__wab_instance",
                            sty.confirmPassword
                          )}
                          label={"Confirm password"}
                          name={"password"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Password cannot be empty"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.confirmPasswordInput
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["confirmPasswordInput", "value"],
                                  AntdInput_Helpers
                                ),
                              type: "password",
                              value: generateStateValueProp($state, [
                                "confirmPasswordInput",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "confirmPasswordInput.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"confirmPasswordInput"}
                                data-plasmic-override={
                                  overrides.confirmPasswordInput
                                }
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__rSbH9
                          )}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zeBhz
                            )}
                          >
                            {"Login"}
                          </div>
                        </AntdButton>
                      </FormWrapper>
                    );
                  })()}
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  userProfile: [
    "userProfile",
    "pageLayout",
    "section",
    "updateProfileForm",
    "email",
    "emailInput",
    "username",
    "usernameInput",
    "msisdn",
    "msisdnInput",
    "logoutButton",
    "updatePasswordForm",
    "password",
    "passwordInput",
    "confirmPassword",
    "confirmPasswordInput"
  ],

  pageLayout: [
    "pageLayout",
    "section",
    "updateProfileForm",
    "email",
    "emailInput",
    "username",
    "usernameInput",
    "msisdn",
    "msisdnInput",
    "logoutButton",
    "updatePasswordForm",
    "password",
    "passwordInput",
    "confirmPassword",
    "confirmPasswordInput"
  ],

  section: [
    "section",
    "updateProfileForm",
    "email",
    "emailInput",
    "username",
    "usernameInput",
    "msisdn",
    "msisdnInput",
    "logoutButton",
    "updatePasswordForm",
    "password",
    "passwordInput",
    "confirmPassword",
    "confirmPasswordInput"
  ],

  updateProfileForm: [
    "updateProfileForm",
    "email",
    "emailInput",
    "username",
    "usernameInput",
    "msisdn",
    "msisdnInput",
    "logoutButton"
  ],

  email: ["email", "emailInput"],
  emailInput: ["emailInput"],
  username: ["username", "usernameInput"],
  usernameInput: ["usernameInput"],
  msisdn: ["msisdn", "msisdnInput"],
  msisdnInput: ["msisdnInput"],
  logoutButton: ["logoutButton"],
  updatePasswordForm: [
    "updatePasswordForm",
    "password",
    "passwordInput",
    "confirmPassword",
    "confirmPasswordInput"
  ],

  password: ["password", "passwordInput"],
  passwordInput: ["passwordInput"],
  confirmPassword: ["confirmPassword", "confirmPasswordInput"],
  confirmPasswordInput: ["confirmPasswordInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserProfilePage__ArgProps,
          internalVariantPropNames: PlasmicUserProfilePage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserProfilePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "userProfile") {
    func.displayName = "PlasmicUserProfilePage";
  } else {
    func.displayName = `PlasmicUserProfilePage.${nodeName}`;
  }
  return func;
}

export const PlasmicUserProfilePage = Object.assign(
  // Top-level PlasmicUserProfilePage renders the root element
  makeNodeComponent("userProfile"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    updateProfileForm: makeNodeComponent("updateProfileForm"),
    email: makeNodeComponent("email"),
    emailInput: makeNodeComponent("emailInput"),
    username: makeNodeComponent("username"),
    usernameInput: makeNodeComponent("usernameInput"),
    msisdn: makeNodeComponent("msisdn"),
    msisdnInput: makeNodeComponent("msisdnInput"),
    logoutButton: makeNodeComponent("logoutButton"),
    updatePasswordForm: makeNodeComponent("updatePasswordForm"),
    password: makeNodeComponent("password"),
    passwordInput: makeNodeComponent("passwordInput"),
    confirmPassword: makeNodeComponent("confirmPassword"),
    confirmPasswordInput: makeNodeComponent("confirmPasswordInput"),
    // Metadata about props expected for PlasmicUserProfilePage
    internalVariantProps: PlasmicUserProfilePage__VariantProps,
    internalArgProps: PlasmicUserProfilePage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Profile",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserProfilePage;
/* prettier-ignore-end */
